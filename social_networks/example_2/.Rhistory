barChart((XAUUSD))
View(XAUUSD)
plot(XAGUSD$XAG.USD,XAUUSD$XAU.USD)
plot(XAGUSD$XAG.USD,XAUUSD$XAU.USD)
plot(XAGUSD$XAG.USD)
line(XAUUSD$XAU.USD)
line(XAUUSD$XAU.USD)
plot(XAGUSD$XAG.USD)
plot(XAUUSD$XAU.USD)
plot(c(XAGUSD$XAG.USD,XAUUSD$XAU.USD))
plot(XAGUSD$XAG.USD,XAUUSD$XAU.USD)
library("GTrendsR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("gtrend", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
gtrend
library(gtrend)
library(dplyr)
library(ggplot2)
library(scales)
library(GTrendsR)
terms = c("gold")
out = gtrend_scraper("craft1.brian@gmail.com", "samso7441", terms)
help("gtrend_scraper")
out = gtrend_scraper("craft1.brian@gmail.com", "samso7441", "Gold")
out = gtrend_scraper("craft1.brian@gmail.com", "samso7441", "test")
out = gtrend_scraper("craft1.brian@gmail.com", "samso74411", terms)
connection = gconnect("craft1.brian@gmail.com", "samso74411")
gold_search = gtrends(connection, "Gold")
gold_search = data.frame(gtrends(connection, "Gold"))
gold_search_df = data.frame(gold_search$trend)
View(gold_search_df)
help("gtrend_scraper")
help("gtrends")
head(gold_search$searches[[1]])
gold_search$rising
gtrend
gtrends
gold_search = gtrends(connection, "Gold", from = '2015-10-01')
gold_search_df = data.frame(gold_search$trend)
View(gold_search_df)
gold_search_df = data.frame(gold_search$trend)
View(gold_search_df)
gold_search = gtrends(connection, "Gold", start = '2015-10-01')
gold_search_df = data.frame(gold_search$trend)
View(gold_search_df)
gold_search = gtrends(connection, "Gold", start = "2015-10-01", end = "2015-10-15")
gold_search_df = data.frame(gold_search$trend)
gold_search = gtrends(connection, "Gold", start = '2015-10-01', end = '2015-10-15')
gold_search_df = data.frame(gold_search$trend)
View(gold_search_df)
data_1 = gold_search_df
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
getMetals(Metals = "XAU", from = '2015-01-01', to = '2015-11-30')
data = XAUUSD
View(data)
colnames(data)
colnames(XAUUSD)[1] = date
colnames(XAUUSD)[1] = "date"
colnames(data)[1] = "date"
index(XAUUSD)
View(XAUUSD)
dates = data.frame(index(XAUUSD))
View(dates)
data = rbind(dates,XAUUSD)
View(data)
data = data.frame(rbind(dates,XAUUSD))
View(data)
View(XAUUSD)
data = data.frame(cbind(dates,XAUUSD))
View(data)
help(cbind)
data = (dates,XAUUSD)
data = (dates,XAUUSD)
data = cbind(dates,XAUUSD)
View(data)
as.Date((data{,1}))
as.Date(data[,1])
as.Date(data[,1],"%m/%d/%y")
data = cbind.data.frame(dates,XAUUSD)
colnames(data)[1] = "date"
colnames(data)[2] = "price"
View(data_1)
colnames(data_1)[2] = "date"
data_final = left_join(data, data_1, by = "date")
View(data_final)
help("left_join")
data_final = inner_join(data, data_1, by = "date")
plot(data_final$price, data_final$gold
plot(data_final$price, data_final$gold)
plot(data_final$price, data_final$gold, type = l)
plot(data_final$price, data_final$gold, type = line)
help(plot)
plot(data_final$price, data_final$gold, type = "l")
plot(data_final$price, data_final$gold)
plot(data_final$price, data_final$date, type = "l")
plot(data_final$date, data_final$price, type = "l")
plot(data_final$date, data_final$price, type = "l", col = "green")
lines(data_final$date, data_final$gold, type = "l", col = "yellow")
plot(data_final$date, data_final$gold, type = "l", col = "yellow")
plot(data_final$date, data_final$gold, type = "l", col = "blue")
plot(data_final$date, data_final$price, type = "l", col = "green")
plot(data_final$date, data_final$price, type = "l", col = "green")
plot(data_final$date, data_final$gold, type = "l", col = "blue")
par(2,1)
plot(data_final$date, data_final$price, type = "l", col = "green")
plot(data_final$date, data_final$gold, type = "l", col = "blue")
par(mflow = c(2,1))
par(mfrow = c(2,1))
plot(data_final$date, data_final$price, type = "l", col = "green")
plot(data_final$date, data_final$gold, type = "l", col = "blue")
plot(data_final$date, data_final$price, type = "l", col = "green")
plot(data_final$date, data_final$gold, type = "l", col = "blue")
cor(data_final$price,data_final$gold)
x_price = scale(data_final$price)
x_gold = scale(data_final$gold)
summary(data_final)
data_final$x_price = scale(data_final$price)
data_final$x_gold = scale(data_final$gold)
summary(data_final)
data_test = subset(data_final, x_price < 3 & x_gold < 3)
cor(data_test$gold, data_test$price)
plot(data_test$gold, data_test$price)
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
getSymbols("GLD", src = "google")
has.VO("GLD")
has.VO(GLD)
GLD['2010']
GLD['2010-01']
GLD['2007-06::2007-01']
GLD['2007-06::2008-01']
marsh <- read.csv("~/Dropbox/Grad School/CSC 424/Assignment 2/data_marsh_cleaned_hw2.csv")
require(CCA)
require(GGally)
require(ggplot2)
require(yacca)
water_var = marsh[,2:6]
soil_var = marsh[,7:9]
cca_water_soil = cca(water_var, soil_var)
summary(cca_water_soil)
pca <- read.delim("~/Dropbox/Grad School/CSC 424/Assignment 2/problem3.txt")
pca$agr_z = scale(pca$Agr)
pca$min_z = scale(pca$Min)
pca$man_z = scale(pca$Man)
pca$ps_z = scale(pca$PS)
pca$con_z = scale(pca$Con)
pca$si_z = scale(pca$SI)
pca$fin_z = scale(pca$Fin)
pca$sps_z = scale(pca$SPS)
pca$tc_z = scale(pca$TC)
pca_df = pca[,11:19]
pca_model = prcomp(pca_df, center = TRUE, scale. = TRUE)
biplot(pca_model, col = c("Blue", "Red"))
biplot(pca_model, col = c("Blue", "Red"), main = "Biplot")
biplot(pca_model, col = c("Blue", "Red"), main = "Biplot - PC1 vs. PC2")
pca <- read.delim("~/Dropbox/Grad School/CSC 424/Assignment 2/problem3.txt")
View(pca)
pca_df = pca[,2:10]
pca_model = prcomp(pca_df, center = TRUE, scale. = TRUE)
print(pca_model)
summary(pca_model)
View(pca_df)
pca_model = prcomp(pca_df)
summary(pca_model)
pca_model = prcomp(pca_df)
summary(pca_model)
pca_model = prcomp(pca_df, center = TRUE, scale. = TRUE)
summary(pca_model)
pca <- read.delim("~/Dropbox/Grad School/CSC 424/Assignment 2/problem3.txt")
View(pca)
pca_df = pca[,2:10]
pca_model = prcomp(pca_df, center = TRUE, scale. = TRUE)
summary(pca_model)
pca_model = prcomp(pca_df, center = FALSE)
summary(pca_model)
377/20
73*45
3285 + 540 + 365 + 50
1000/67
4240*15
30*24
200/(12/720)
200 * (12/720)
397 + 425 + 380 + 790 + 8
6 *60
460/60
A = matrix(
c(0.1/2,1,1,0,0,0,1/2,0), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)
A
A = matrix(
c(0.1/2,1,0,0,0,0,1/2,0), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)
A
m = matrix(c(0,1/2,1,1,0,0,0,1/2,0), nrow = 3, ncol = 3, byrow = T)
n = matrix(c(1/3,1/3,1/3), nrows = 3, ncol = 1, byrow = T)
n = matrix(c(1/3,1/3,1/3), nrow = 3, ncol = 1, byrow = T)
n
m * n
m
n
m*n
n = matrix(c(1/3,1/3,1/3), nrow = 3, ncol = 1, byrow = F)
n
m*n
m
n
z = m*n
f = c(1/3,1/3,1/3)
z = m*f
f
m * t(n)
m * n
m %*% n
m %*% z
z
z = m %*% n
z
m %*% z
263117/.1
1200/60
3785/60
37000 * 37000
87650719/344002527
library(ISLR)
attach(Carseats)
data <- Carseats
library(class)
set.seed(1234)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 3)
set.seed(1234)
ind <- sample(2, nrow(data), replace=TRUE, prob=c(0.8, 0.2))
train <- data[ind==1,]
test <- data[ind==2,]
set.seed(1234)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 3)
mean(pred.test.knn != test$StrongSales)
data$StrongSales <- as.factor( ifelse(data$Sales >=10, "Yes", "No") )
install.packages("ISLR")
library(ISLR)
attach(Carseats)
data <- Carseats
help(Carseats)
library(ISLR)
attach(Carseats)
data <- Carseats
set.seed(1234)
ind <- sample(2, nrow(data), replace=TRUE, prob=c(0.8, 0.2))
train <- data[ind==1,]
test <- data[ind==2,]
library(ISLR)
attach(Carseats)
data <- Carseats
data$StrongSales <- as.factor( ifelse(data$Sales >=10, "Yes", "No") )
data$Sales <- NULL
set.seed(1234)
ind <- sample(2, nrow(data), replace=TRUE, prob=c(0.8, 0.2))
train <- data[ind==1,]
test <- data[ind==2,]
set.seed(1234)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 3)
mean(pred.test.knn != test$StrongSales)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 5)
mean(pred.test.knn != test$StrongSales)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 10)
mean(pred.test.knn != test$StrongSales)
mean(pred.train.knn != test$StrongSales)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 10)
mean(pred.test.knn != test$StrongSales)
table(pred.test.knn,test$StrongSales)
library(e1071)
model.nb <- naiveBayes(StrongSales ~ . , data=train)
model.nb
data$CompPrice.z = scale(data$CompPrice)
data$Income.z = scale(data$Income)
data$Advertising.z = scale(data$Advertising)
data$Population.z = scale(data$Population)
data$Age.z = scale(data$Age)
data$Price.z = scale(data$Price)
data$Education.z = scale(data$Education)
data$CompPrice = NULL
data$Income = NULL
data$Advertising = NULL
data$Population = NULL
data$Age = NULL
data$Price = NULL
data$Education = NULL
data$ShelveLoc.Bad = if(data$ShelveLoc == 'Bad', 1, 0)
data$ShelveLoc.Bad = ifelse(data$ShelveLoc == 'Bad', 1, 0)
data$ShelveLoc.Medium = ifelse(data$ShelveLoc == 'Medium', 1, 0)
data$ShelveLoc.Good = ifelse(data$ShelveLoc == 'Good', 1, 0)
data$Urban.no = ifelse(data$Urban == 'No', 1, 0)
data$Urban.yes = ifelse(data$Urban == 'Yes', 1, 0)
data$US.no = ifelse(data$US == 'No', 1, 0)
data$US.yes = ifelse(data$US == 'Yes', 1, 0)
data$ShelveLoc = NULL
data$Urban = NULL
data$US = NULL
set.seed(1234)
ind <- sample(2, nrow(data), replace=TRUE, prob=c(0.8, 0.2))
train <- data[ind==1,]
test <- data[ind==2,]
View(train)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 5)
mean(pred.test.knn != test$StrongSales)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 5)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[11,], k = 3)
train[,11]
train[,1:5]
train[,1]
pred.test.knn <- knn(train[,2:15], test[,2:15], train[,1], k = 3)
mean(pred.test.knn != test$StrongSales)
pred.test.knn <- knn(train[,2:15], test[,2:15], train[,1], k = 5)
mean(pred.test.knn != test$StrongSales)
pred.test.knn <- knn(train[,2:15], test[,2:15], train[,1], k = 10)
mean(pred.test.knn != test$StrongSales)
library(ISLR)
attach(Carseats)
data <- Carseats
data$StrongSales <- as.factor( ifelse(data$Sales >=10, "Yes", "No") )
data$Sales <- NULL
set.seed(1234)
ind <- sample(2, nrow(data), replace=TRUE, prob=c(0.8, 0.2))
train <- data[ind==1,]
test <- data[ind==2,]
set.seed(1234)
pred.test.knn <- knn(train[,2:15], test[,2:15], train[,1], k = 3)
mean(pred.test.knn != test$StrongSales)
set.seed(1234)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 3)
mean(pred.test.knn != test$StrongSales)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 5)
mean(pred.test.knn != test$StrongSales)
pred.test.knn <- knn(train[,1:5], test[,1:5], train[,11], k = 10)
mean(pred.test.knn != test$StrongSales)
table(pred.test.tree,test$StrongSales)
table(pred.test.knn,test$StrongSales)
data$CompPrice.z = scale(data$CompPrice)
data$Income.z = scale(data$Income)
data$Advertising.z = scale(data$Advertising)
data$Population.z = scale(data$Population)
data$Age.z = scale(data$Age)
data$Price.z = scale(data$Price)
data$Education.z = scale(data$Education)
data$CompPrice = NULL
data$Income = NULL
data$Advertising = NULL
data$Population = NULL
data$Age = NULL
data$Price = NULL
data$Education = NULL
data$ShelveLoc.Bad = ifelse(data$ShelveLoc == 'Bad', 1, 0)
data$ShelveLoc.Medium = ifelse(data$ShelveLoc == 'Medium', 1, 0)
data$ShelveLoc.Good = ifelse(data$ShelveLoc == 'Good', 1, 0)
data$Urban.no = ifelse(data$Urban == 'No', 1, 0)
data$Urban.yes = ifelse(data$Urban == 'Yes', 1, 0)
data$US.no = ifelse(data$US == 'No', 1, 0)
data$US.yes = ifelse(data$US == 'Yes', 1, 0)
data$ShelveLoc = NULL
data$Urban = NULL
data$US = NULL
pred.test.knn <- knn(train[,2:15], test[,2:15], train[,1], k = 3)
mean(pred.test.knn != test$StrongSales)
pred.test.knn <- knn(train[,2:15], test[,2:15], train[,1], k = 3)
set.seed(1234)
ind <- sample(2, nrow(data), replace=TRUE, prob=c(0.8, 0.2))
train <- data[ind==1,]
test <- data[ind==2,]
View(train)
pred.test.knn <- knn(train[,2:15], test[,2:15], train[,1], k = 3)
mean(pred.test.knn != test$StrongSales)
pred.test.knn <- knn(train[,2:15], test[,2:15], train[,1], k = 5)
mean(pred.test.knn != test$StrongSales)
pred.test.knn <- knn(train[,2:15], test[,2:15], train[,1], k = 10)
mean(pred.test.knn != test$StrongSales)
table(pred.test.knn,test$StrongSales)
1 * ln(0) + (1-1) * ln(1-0)
1 * log(0) + (1-1) * log(1-0)
1 * log(0,2.14) + (1-1) * log(1-0,2.14)
0 * log(1,2.14) + (1-0) * log(1-1,2.14)
log(1)
log(0)
log(0)
log(10)
log(1)
log(1)
log(0)
log(0)
source("get.R")
source("munge.R")
source("analyze.R")
list.of.packages <- c('dplyr', 'randomForest', 'plotly', 'webshot', 'corrplot')
75000/48000
48/75
130000 * .64
83200/24
83200/12
.007 * 10000
24 * 7
168 - 40 - 40
- (8*7)
88 - 56
13 * 10
* 15
130 * 15
/24
195-/24
1950/24
13 * 10 * 10
1300 / 24
install.packages("network")
install.packages("sna")
install.packages("RColorBrewer")
install.packages("ggplot2")
install.packages("GGally")
install.packages("sand")
install.packages("intergraph")
install.packages("formatR")
install.packages(c("amap", "boot", "cluster", "codetools", "colorspace", "diagram", "digest", "KernSmooth", "manipulate", "MASS", "mgcv", "nlme", "nnet", "plspm", "Rcpp", "reshape2", "shape", "spatial"))
library("formatR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
network, sna, RColorBrewer, ggplot2, GGally, sand, intergraph
getOption('repos')
install.packages("formatR")
library("formatR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("formatR", repos = "http://cran.rstudio.com")
install.packages("formatR", repos = "http://cran.rstudio.com")
detach("package:formatR", unload=TRUE)
library(formatR)
sessionInfo()
require(devtools)
install_version("formatR", version = "1.1.6", repos = "http://cran.us.r-project.org")
install_version("formatR", version = "1.4", repos = "http://cran.us.r-project.org")
install.packages("~/Desktop/formatR_1.4.tar.gz", repos = NULL, type = "source")
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("igraphdata", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("~/Desktop/igraph_1.0.1.tgz", repos = NULL, type = .Platform$pkgType)
detach("package:igraph", unload=TRUE)
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("quantreg")
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
detach("package:igraph", unload=TRUE)
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("graph")
install.packages("igraph")
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("ggplot2")
# Must load other packages first
library("sand")
library("intergraph")
install.packages("sand")
install.packages("intergraph")
library("ggplot2")
# Must load other packages first
library("sand")
library("intergraph")
# ---- C2 ----
# Load data
setwd("~/Documents/Craft-Repo/social_networks/example_2")
davis = read.graph("davis.graphml", format = "graphml")
# ---- C3 ----
# Examine data
summary(davis)
# ---- C4 ----
# Plot using bipartite layout
lo = layout.bipartite(davis)
lo2 = cbind(lo[,2],lo[,1])
plot(davis, layout = lo2)
# ---- C5 ----
# Look at labels and types
V(davis)$label[1:5]
V(davis)$type[1:5]
# ---- C6 ----
# Create person-person projection
davis.p2p = bipartite.projection(davis, which = "false")
# ---- C7 ----
# Plot the projected graph
plot(davis.p2p)
# ---- C8 ----
# Plot the distribution of edge weights
davis.wts = E(davis.p2p)$weight
hist(davis.wts)
# ---- C9 ----
# Create a new network removing the edges of weight 1 and 2.
davis.filt = delete.edges(davis.p2p,
E(davis.p2p)[E(davis.p2p)$weight <= 2])
plot(davis.filt, layout = layout.kamada.kawai(davis.filt))
# ---- C10 ----
# Plot the weighted degree distribution of the new network
davis.deg = graph.strength(davis.filt)
p = ggplot(data.frame(Degree = davis.deg), aes(x = Degree))
p = p + geom_histogram(breaks = seq(0,50), col = "white")
print(p)
# ---- C11 ----
# Extract the ego networks for Laura and Sylvia
which(V(davis.filt)$label == "Laura")
which(V(davis.filt)$label == "Sylvia")
?make_ego_graph
egos = make_ego_graph(davis.filt, 1, c(2,13))
laura = egos[[1]]
sylvia = egos[[2]]
par(mfrow = c(1,2))
plot(laura)
plot(sylvia)
par(mfrow = c(1,1))
lo_laura = layout_as_star(laura)
lo_sylvia = layout_as_star(sylvia)
par(mfrow = c(1,2))
plot(laura, layout = lo_laura)
plot(sylvia, layout = lo_sylvia)
